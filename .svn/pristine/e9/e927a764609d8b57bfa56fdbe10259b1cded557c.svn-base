import {ViewChildren, Component, Directive, ElementRef, Renderer, OnInit} from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import 'rxjs/add/operator/switchMap';
import { EmployeeDetailComponent } from '../employee-detail/employee-detail.component';
import { PayrollService } from '../../services/Payroll.service';
import _ from "lodash";
import * as moment from 'moment';
import alertify from 'alertify.js';
import * as $ from 'jquery';
import { DecimalPipe } from '@angular/common';
import {MyInput} from '../../directive/autoFocus';


@Component({
  selector: 'app-deduction-alowances',
  templateUrl: './deduction-alowances.component.html',
  styleUrls: ['./deduction-alowances.component.css']
})

export class DeductionAlowancesComponent implements OnInit {
   @ViewChildren(MyInput) inputs;
  employeeid;
  deduction
  name
  value = 1;
  deductionDetail;
  activateDeduction = true;
  activateAllowance;
  deductionType;
  showStyle: false;
  selectedDeduction: null;
  deductionAmount;
  values = '';
  deductionComment
  username
  createdate
  total
  updatebtnVisibility=false;
  updateid;
  hiddenType=false;
  autoFocus=true;
  
  constructor(
    private route: ActivatedRoute,
    private employeedetail: EmployeeDetailComponent,
    private wishPayrollService: PayrollService,
  ) { }

  ngOnInit() {


    let userinfo = JSON.parse(localStorage.getItem('userInfo'));
    this.username = userinfo.username;
    this.createdate = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");


    let desc = this.route.snapshot.paramMap.get('id');
    this.employeeid = desc;
    let employeeDetail = {
      id: parseInt(this.employeeid)

    }
    this.wishPayrollService.getEmployeeName(employeeDetail).then(response => {
      this.name = response.json().data

    })
    this.wishPayrollService.getDeductionDetails(employeeDetail).then(response => {
      this.deductionDetail = response.json().data
    
      this.totalEmployeeDeduction()
  

    })
    this.wishPayrollService.getDeductionType().then(response => {
      this.deductionType = response.json().data
    })
 
  }

  //changing deduction tab-----------------------------------------------------------------------------
  activatedDeduction() {
    this.activateDeduction = true;
    this.activateAllowance = false;

  }
  //changing alowances tab-----------------------------------------------------------------------------
  activatedAllowance() {
    this.activateAllowance = true;
    this.activateDeduction = false;

  }
  // diduction drop downlist..........................................................................

  deductionDropDowan(id: number): void {
    console.log(id) 
     if(this.deductionAmount== null || this.deductionComment==null || id==null){
      alertify.success('Fill Details');
    }else{
      let avalable = false;
      const did = this.deductionType.find((item: any) => item.name === id).id;
      var values = {
        id: did,
        name: id,
        amount: this.deductionAmount,
        comment: this.deductionComment,
        createdUserid: this.username,
        createdDate: this.createdate,
        employeeid: parseInt(this.employeeid)
  
      }
    
      console.log('wwww', values)
      for (let deduction = 0; deduction < this.deductionDetail.length; deduction++) {
        if (id == this.deductionDetail[deduction].name) {
          avalable = true;
          break;
        }
      }
  
      if (avalable) {
        console.log('already added')
      } else {
        let all=this;
        this.wishPayrollService.deductionDropDown(values).then(response => {
          all.deductionDetail.push(values)
          all.totalEmployeeDeduction();
        })
      }
    
      // add deduction to db//
  
      this.resetForm()
    }

  }

  getStyle() {
    if (this.showStyle) {
      return "lightgreen";
    } else {
      return "";
    }
  }
  changeDeducAmount(value) {
    console.log(this.deductionDetail)

    let cc = _.findIndex(this.deductionDetail, { 'id': this.deduction });
    console.log('dddddd', this.deduction)
    console.log('ssssss', value)
    console.log('index', cc)

  }

  // delete employee deduction item
  deleteDeductionRow(id, index) {
   
    let deducId=this.deductionType.find(data=>data.name===id.name).id;
    console.log('eeee',deducId)
    let data={
      deductid:deducId,
      id: parseInt(this.employeeid)
    }
    let self = this;
    alertify.confirm("", function () {
      self.wishPayrollService.deleteEmployeeDeductionItem(data).then(response => {
        self.deductionDetail.splice(index, 1);
        alertify.logPosition("bottom right");
        alertify.delay(500);
        alertify.success('Delete Succesful');
        self.totalEmployeeDeduction();
      });

    }, function () {
      alertify.error('Declined');
    })
    

  }
  // total employee deduction................

  totalEmployeeDeduction(){
    let total=0;
    for(let a=0;a<this.deductionDetail.length;a++){
      total=total+parseInt(this.deductionDetail[a].amount)
    }
    this.total=total
    console.log('ssssss',total)
  }

  updateDeductionRow(id,index){
    console.log('update',id)
    this.deduction=id.name
    this.deductionAmount=id.amount
    this.deductionComment=id.comment
    this.updatebtnVisibility=true;
    this.updateid=index;
    this.hiddenType=true;
    this.autoFocus=true;
  }

  updateDeductions(){
    this.updatebtnVisibility=false;
    this.deductionDetail[this.updateid].comment=this.deductionComment
    this.deductionDetail[this.updateid].amount=this.deductionAmount
    this.deductionDetail[this.updateid].name=this.deduction

    const did = this.deductionType.find((item: any) => item.name === this.deduction).id;
    let updatedata={
      empId:parseInt(this.employeeid),
      deductionId:did,
      amount:this.deductionAmount,
      comment:this.deductionComment
    }
    this.wishPayrollService.updatedDeduction(updatedata).then(response => {
     
  

    })

    console.log(updatedata)


    this.resetForm()
    this.totalEmployeeDeduction();
    this.hiddenType=false

  }

  resetForm(){
    this.deductionAmount=null;
    this.deductionComment=null;
    this.deduction=null;
  }
  selectSample() {
    this.inputs.toArray().some(myInput =>
      myInput.focusIf('deductionAmount'));
  }

}