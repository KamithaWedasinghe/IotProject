import { Component, OnInit } from '@angular/core';
import { PayrollMasterService } from '../services/payrollMaster.service';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import alertify from 'alertify.js';
declare var jQuery: any;


@Component({
  selector: 'app-setting',
  templateUrl: './setting.component.html',
  styleUrls: ['./setting.component.css']
})
export class SettingComponent implements OnInit {
  allAllowances;
  // newAllowanceType;
  allDeductions;
  newDeductionType;
  allowanceInputText;
  categories;
  contributions;
  deductionInputText;
  categoryInputText;
  contributionInputText;
  editIdAllowance;
  editIdDeduction;
  editIdCategory;
  editAllowanceText;
  editDeductionText;
  editCategoryText;
  idForBlock;
  // deleteAllowanceId;

  constructor(private router: Router, private PayrollMasterService: PayrollMasterService, private formBuilder: FormBuilder) { }

  ngOnInit() {
    this.getAllowanceTypes();
    this.getDeductionTypes();
    this.getCategoryTypes();
    this.getContributionTypes();
  }

  getAllowanceTypes() {
    this.PayrollMasterService.getAllowances().then(details => {
      this.allAllowances = details.json().data;
    });
  }
  getDeductionTypes() {
    this.PayrollMasterService.getDeductions().then(details => {
      this.allDeductions = details.json().data;
    });
  }
  getCategoryTypes() {
    this.PayrollMasterService.getCategories().then(details => {
      this.categories = details.json().data;
    });

  }
  getContributionTypes() {
    this.PayrollMasterService.getContributions().then(details => {
      this.contributions = details.json().data;
    });

  }
  showBlockAllowance() {
    var x = document.getElementById("allowanceText");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }

  }
  showBlockDeduction() {
    var x = document.getElementById("deductionText");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }

  }

  showBlockCategory() {
    var x = document.getElementById("categoryText");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
  }
  showBlockContribution() {
    var x = document.getElementById("contrbutionText");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
  }
  showBlockEditAllowance(id, name) {
    this.editIdAllowance = id;
    jQuery('#editAllowanceText').val(name);
    var x = document.getElementById("editAllowInput");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
  }
  showBlockEditDeduction(id, name) {
    this.editIdDeduction = id;
    jQuery('#editDeductionText').val(name);
    var x = document.getElementById("editDeducInput");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
  }
  showBlockEditCategory(id, name) {
    this.editIdCategory = id;
    jQuery('#editCategoryText').val(name);
    var x = document.getElementById("editCategoryInput");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
  }


  addAllowanceType() {
    if (this.allowanceInputText != null) {
      this.PayrollMasterService.setAllowances(this.allowanceInputText).then(details => {
        let responses = details.json().error;
        jQuery('#allowanceInputText').val('');
        this.allowanceInputText = null;
        if (responses == false) {


          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.showBlockAllowance();
          this.getAllowanceTypes();
        } else {
          this.showBlockAllowance();
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      this.showBlockAllowance();
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Fill Text Field");
    }
  }

  addDeductionType() {
    if (this.deductionInputText != null) {
      this.PayrollMasterService.setDedctions(this.deductionInputText).then(details => {
        let responses = details.json().error;
        jQuery('#deductionInputText').val('');
        this.deductionInputText = null;
        if (responses == false) {


          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.showBlockDeduction();
          this.getDeductionTypes();
        } else {
          this.showBlockDeduction();
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      this.showBlockDeduction();
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Fill Text Field");
    }
  }

  addCategoryType() {
    if (this.categoryInputText != null) {
      this.PayrollMasterService.setCategory(this.categoryInputText).then(details => {
        let responses = details.json().error;
        jQuery('#categoryInputText').val('');
        this.categoryInputText = null;
        if (responses == false) {


          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.showBlockCategory();
          this.getCategoryTypes();
        } else {
          this.showBlockCategory();
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      this.showBlockCategory();
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Fill Text Field");
    }
  }
  addContributionType() {
    if (this.contributionInputText != null) {
      this.PayrollMasterService.setContribution(this.contributionInputText).then(details => {
        let responses = details.json().error;
        jQuery('#contributionInputText').val('');
        this.contributionInputText = null;
        if (responses == false) {
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.showBlockContribution();
          this.getContributionTypes();
        } else {
          this.showBlockContribution();
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      this.showBlockContribution();
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Fill Text Field");
    }
  }


  editAllowanceType() {
    let editData = {
      id: this.editIdAllowance,
      key: 'name',
      value: this.editAllowanceText
    }

    if (editData.id != null && editData.value != null) {
      this.PayrollMasterService.updateAllowances(editData).then(details => {
        let responses = details.json().error;
        jQuery('#editAllowanceText').val('');
        this.idForBlock = null;
        this.editAllowanceText = null;

        if (responses == false) {


          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.showBlockEditAllowance(this.idForBlock, null);
          this.getAllowanceTypes();
        } else {
          this.showBlockEditAllowance(this.idForBlock, null);
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      this.showBlockEditAllowance(this.idForBlock, null);
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Not Change");
    }
  }

  editDeductionType() {
    let editData = {
      id: this.editIdDeduction,
      key: 'name',
      value: this.editDeductionText
    }
    if (editData.id != null && editData.value != null) {
      this.PayrollMasterService.updateDeduction(editData).then(details => {
        let responses = details.json().error;
        jQuery('#editDeductionText').val('');
        this.idForBlock = null;
        this.editDeductionText = null;

        if (responses == false) {


          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.showBlockEditDeduction(this.idForBlock, null);
          this.getDeductionTypes();
        } else {
          this.showBlockEditDeduction(this.idForBlock, null);
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      this.showBlockEditDeduction(this.idForBlock, null);
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Not Change");
    }
  }
  editCategoryType() {
    let editData = {
      id: this.editIdCategory,
      key: 'name',
      value: this.editCategoryText
    }

    if (editData.id != null && editData.value != null) {
      this.PayrollMasterService.updateCategories(editData).then(details => {
        let responses = details.json().error;
        jQuery('#editCategoryText').val('');
        this.idForBlock = null;
        this.editCategoryText = null;

        if (responses == false) {


          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.showBlockEditCategory(this.idForBlock, null);
          this.getCategoryTypes();
        } else {
          this.showBlockEditCategory(this.idForBlock, null);
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      this.showBlockEditCategory(this.idForBlock, null);
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Not Change");
    }
  }

  deleteAllowanceType(id) {
    let deleteAllowanceId = id;
    if (deleteAllowanceId != null) {
      this.PayrollMasterService.deleteAllowance(deleteAllowanceId).then(details => {
        let responses = details.json().error;

        if (responses == false) {
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.getAllowanceTypes();
        } else {
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Fill Text Field");
    }
  }

  deleteDeductionType(id) {
    let deleteDeductionId = id;
    if (deleteDeductionId != null) {
      this.PayrollMasterService.deleteDeduction(deleteDeductionId).then(details => {
        let responses = details.json().error;

        if (responses == false) {
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Delete Successfuly');
          this.getDeductionTypes();
        } else {
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Try again");
    }
  }

  deleteCategoryType(id) {
    let deleteCategoryId = id;
    if (deleteCategoryId != null) {
      this.PayrollMasterService.deleteCategory(deleteCategoryId).then(details => {
        let responses = details.json().error;

        if (responses == false) {
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.success('Save Successfuly');
          this.getCategoryTypes();
        } else {
          alertify.delay(2000);
          alertify.logPosition("bottom right");
          alertify.error("Try Again");
        }
      });
    } else {
      alertify.delay(2000);
      alertify.logPosition("bottom right");
      alertify.error("Fill Text Field");
    }
  }
}